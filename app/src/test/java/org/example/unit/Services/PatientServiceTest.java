/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.unit.Services;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

import org.example.Entities.Patient;
import org.example.Exceptions.PatientNotFoundException;
import org.example.Services.PatientService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class PatientServiceTest {
    @Autowired
    private PatientService patientService;

    @Test
    void testFindOneById() {
        Patient patient = new Patient();
        patient.setName("John");
        patientService.save(patient);

        Patient found = patientService.findOneById(patient.getId());
        assertNotNull(found, "Patient should be found");
    }

    @Test
    void testFindAll() {
        Patient patient1 = new Patient();
        patient1.setName("John");
        patientService.save(patient1);

        Patient patient2 = new Patient();
        patient2.setName("Jane");
        patientService.save(patient2);

        assertEquals(2, patientService.getAllPatients().size(), "There should be two patients");
    }

    @Test
    void testSave() {
        Patient patient = new Patient();
        patient.setName("John");
        Patient saved = patientService.save(patient);

        assertNotNull(saved.getId(), "Saved patient should have an ID");
    }

    @Test
    void testUpdate() {
        Patient patient = new Patient();
        patient.setName("John");
        patientService.save(patient);

        patient.setName("John Updated");
        Patient updated = patientService.update(patient.getId(), patient);

        assertEquals("John Updated", updated.getName(), "Patient name should be updated");
    }

    @Test
    void testDelete() {
        Patient patient = new Patient();
        patient.setName("John");
        patientService.save(patient);

        patientService.delete(patient.getId());
        assertThrows(PatientNotFoundException.class, () -> {
            patientService.findOneById(patient.getId());
        }, "Patient should be deleted");
    }

    @Test
    void testFindByNameStartsWith() {
        Patient patient = new Patient();
        patient.setName("John");
        patientService.save(patient);

        List<Patient> patients = patientService.findByNameStartsWith("Jo");
        assertEquals(1, patients.size(), "There should be one patient with name starting with 'Jo'");
    }
}

